classdef aten__mean10 < nnet.layer.Layer & nnet.layer.Formattable
    %aten__mean10 Auto-generated custom layer
    % Auto-generated by MATLAB on 26-Oct-2022 11:08:23
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
        
        mean_28
        
        
        mean_13
        
        
        mean_14
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__mean10(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 2;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [mean_input_1, mean_input_1_rank] = predict(obj,mean_8)
            
            if ~contains(dims(mean_8),'U')
                [mean_8] = struct('value', mean_8, 'rank', ndims(mean_8));
            else
                [mean_8] = struct('value', mean_8, 'rank', ndims(mean_8));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'mean_8', 'aten__mean10'));
            end
            
            import traced_mnasnet1_0.ops.*;
            
            [mean_28] = makeStructForConstant(int32(obj.mean_28), int32(1), "Typed");
            [mean_13] = makeStructForConstant(int32(obj.mean_13), int32(0), "Typed");
            [mean_14] = makeStructForConstant(double(obj.mean_14), int32(0), "Typed");
            [mean_input_1] = pyMean(mean_8, mean_28, mean_13);
            [mean_input_1_rank] = ones([1,mean_input_1.rank]);
            mean_input_1_rank = dlarray(mean_input_1_rank,'UU');
            mean_input_1 = mean_input_1.value ;
            
        end
        
        
        
        function [mean_input_1, mean_input_1_rank] = forward(obj,mean_8)
            
            if ~contains(dims(mean_8),'U')
                [mean_8] = struct('value', mean_8, 'rank', ndims(mean_8));
            else
                [mean_8] = struct('value', mean_8, 'rank', ndims(mean_8));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'mean_8', 'aten__mean10'));
            end
            
            import traced_mnasnet1_0.ops.*;
            
            [mean_28] = makeStructForConstant(int32(obj.mean_28), int32(1), "Typed");
            [mean_13] = makeStructForConstant(int32(obj.mean_13), int32(0), "Typed");
            [mean_14] = makeStructForConstant(double(obj.mean_14), int32(0), "Typed");
            [mean_input_1] = pyMean(mean_8, mean_28, mean_13);
            [mean_input_1_rank] = ones([1,mean_input_1.rank]);
            mean_input_1_rank = dlarray(mean_input_1_rank,'UU');
            mean_input_1 = mean_input_1.value ;
            
        end
        
        
    end
end

