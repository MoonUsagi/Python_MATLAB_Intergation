classdef aten__add5 < nnet.layer.Layer & nnet.layer.Formattable
    %aten__add5 Auto-generated custom layer
    % Auto-generated by MATLAB on 26-Oct-2022 11:08:22
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        
        
        add_8
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        
    end
    
    methods
        function obj = aten__add5(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 2;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [add_input_1] = predict(obj,add_6, add_argument1_1)
            
            if ~contains(dims(add_6),'U')
                [add_6] = struct('value', add_6, 'rank', ndims(add_6));
            else
                [add_6] = struct('value', add_6, 'rank', ndims(add_6));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'add_6', 'aten__add5'));
            end
            
            if ~contains(dims(add_argument1_1),'U')
                [add_argument1_1] = struct('value', add_argument1_1, 'rank', ndims(add_argument1_1));
            else
                [add_argument1_1] = struct('value', add_argument1_1, 'rank', ndims(add_argument1_1));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'add_argument1_1', 'aten__add5'));
            end
            
            import traced_mnasnet1_0.ops.*;
            
            [add_8] = makeStructForConstant(int32(obj.add_8), int32(0), "Typed");
            [add_input_1] = pyElementwiseBinary(add_6, add_argument1_1, 'plus');
            
            [add_input_1] = labelWithPropagatedFormats(add_input_1, "*CSS");
            add_input_1 = add_input_1.value ;
            
        end
        
        
        
        function [add_input_1] = forward(obj,add_6, add_argument1_1)
            
            if ~contains(dims(add_6),'U')
                [add_6] = struct('value', add_6, 'rank', ndims(add_6));
            else
                [add_6] = struct('value', add_6, 'rank', ndims(add_6));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'add_6', 'aten__add5'));
            end
            
            if ~contains(dims(add_argument1_1),'U')
                [add_argument1_1] = struct('value', add_argument1_1, 'rank', ndims(add_argument1_1));
            else
                [add_argument1_1] = struct('value', add_argument1_1, 'rank', ndims(add_argument1_1));
                warning(message('nnet_cnn_pytorchconverter:pytorchconverter:PossibleLossOfRank', 'add_argument1_1', 'aten__add5'));
            end
            
            import traced_mnasnet1_0.ops.*;
            
            [add_8] = makeStructForConstant(int32(obj.add_8), int32(0), "Typed");
            [add_input_1] = pyElementwiseBinary(add_6, add_argument1_1, 'plus');
            
            [add_input_1] = labelWithPropagatedFormats(add_input_1, "*CSS");
            add_input_1 = add_input_1.value ;
            
        end
        
        
    end
end

